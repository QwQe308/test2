{"version":3,"file":"mr2-test-mods.js","mappings":";;;;;;;;;;;;;;;;;;;;;AACA;AACA;AAKA;AAQA;AACA;AAEA;AACA;AACA;AAKA;AACA;AAEA;AACA;AAMA;AAEA;AAIA;AAEA;;;;;;;;;;;;;;AClCA;AAEA;AAMA;AAUA;AAKA;AAAA;AAEA;AASA;AAAA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AAEA;AAEA;AAKA;AAGA;AAIA;AAIA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;;ACjJA;AACA;AAKA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAQA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACxLA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACDA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://mr2-test-mods/./src/MR2TestMods.ts","webpack://mr2-test-mods/./src/mod/AntimatterDimensions.ts","webpack://mr2-test-mods/./src/mod/AntimatterElement.ts","webpack://mr2-test-mods/./node_modules/magic-research-2-modding-sdk/index.js","webpack://mr2-test-mods/webpack/bootstrap","webpack://mr2-test-mods/webpack/runtime/define property getters","webpack://mr2-test-mods/webpack/runtime/hasOwnProperty shorthand","webpack://mr2-test-mods/webpack/runtime/make namespace object","webpack://mr2-test-mods/./src/index.ts"],"sourcesContent":["import { MR2Globals } from \"magic-research-2-modding-sdk\";\nimport { ADmod } from \"./mod/AntimatterDimensions\";\nimport {\n  loadElementCreationTestMod,\n  preloadElementCreationTestMod,\n} from \"./mod/AntimatterElement\";\n\nconst PACKAGE = require(\"../package.json\");\n\n// This function is the main function where you are going to load all the logic\n// and content.\n// The argument MR2 is the main way you have to interact with the MR2 backend,\n// and contains a ton of functions and classes that will let you build your content.\n// Check the TypeScript declaration to see what are all the different things you\n// have.\nexport function load(MR2: MR2Globals) {\n  MR2.alert(\"Loading mod\", \"Beginning to load\");\n\n  loadElementCreationTestMod(MR2);\n  ADmod(MR2);\n}\n\n// In this function you will want to load things that could potentially affect\n// the main game's content.\n// The main purpose for this is to add new Elements or Resources.\nexport function preload(MR2: MR2Globals) {\n  MR2.alert(\"Preloading mod\", \"Beginning to preload\");\n\n  preloadElementCreationTestMod(MR2);\n}\n\n// The following fields are used by the game.\n// It's best to take them from package.json if possible.\n\n// This id is used as the main way to reference your mod in-game.\nexport const id = PACKAGE.name;\n// The name is a human-readable name for your mod.\nexport const name = PACKAGE.description;\n// Please follow the format [major].[minor].[patch]. The game internally\n// assumes the version will be in this format to check for save\n// compatibility.\nexport const version = PACKAGE.version;\n// A description that could be shown in-game.\nexport const description =\n  \"A set of MR2 test mods to try out the modding feature.\";\n","import { MR2Globals } from \"magic-research-2-modding-sdk\";\r\nimport {\r\n  ActionArea,\r\n  ActionSubcategory,\r\n} from \"magic-research-2-modding-sdk/modding-decs/backend/action/ActionAreas\";\r\nimport { Building } from \"magic-research-2-modding-sdk/modding-decs/backend/buildings/Building\";\r\nimport { GameState } from \"magic-research-2-modding-sdk/modding-decs/backend/GameState\";\r\nimport { Resource } from \"magic-research-2-modding-sdk/modding-decs/backend/Resources\";\r\nimport { SpellElement } from \"magic-research-2-modding-sdk/modding-decs/backend/spells/Elements\";\r\nexport function ADmod(MR2: MR2Globals) {\r\n  // Building\r\n  const calculateIncomePerGeyser = (state: GameState) =>\r\n    MR2.applyTransformationsCached(\r\n      [MR2.TransformationTags.Production, MR2.Resource.Mana, \"manaGeyser\"],\r\n      state,\r\n      20.0,\r\n    );\r\n  const calculateExpensePerGeyser = (state: GameState) =>\r\n    MR2.applyTransformationsCached(\r\n      [\r\n        MR2.TransformationTags.Consumption,\r\n        MR2.Resource.EarthEssence,\r\n        \"manaGeyser\",\r\n      ],\r\n      state,\r\n      200.0,\r\n    );\r\n  const explainIncomePerGeyser = (state: GameState) =>\r\n    MR2.explainTransformationsText(\r\n      [MR2.TransformationTags.Production, MR2.Resource.Mana, \"manaGeyser\"],\r\n      state,\r\n      20.0,\r\n      { unit: \":mana:\" },\r\n    );\r\n  const explainExpensePerGeyser = (state: GameState) =>\r\n    MR2.explainTransformationsText(\r\n      [\r\n        MR2.TransformationTags.Consumption,\r\n        MR2.Resource.EarthEssence,\r\n        \"manaGeyser\",\r\n      ],\r\n      state,\r\n      200.0,\r\n      { unit: \":earthessence:\" },\r\n    );\r\n\r\n  class ManaGeyser extends MR2.Building {\r\n    getId(): string {\r\n      return \"manaGeyser\";\r\n    }\r\n\r\n    getName(): string {\r\n      return \"Mana Geyser\";\r\n    }\r\n\r\n    getBaseLandRequired(): number {\r\n      return 1;\r\n    }\r\n\r\n    canTurnOff(): boolean {\r\n      return true;\r\n    }\r\n    getDisplayDescription(state: GameState): string {\r\n      return \"A strong source of :mana:. Draws from the power of :earthessence:.\";\r\n    }\r\n\r\n    getDisplayEffect(state: GameState): string {\r\n      const income = calculateIncomePerGeyser(state);\r\n      const expense = calculateExpensePerGeyser(state);\r\n      const incomeExplanation = explainIncomePerGeyser(state);\r\n      const expenseExplanation = explainExpensePerGeyser(state);\r\n      return `^${MR2.formatNumber(\r\n        income,\r\n      )}^<${incomeExplanation}>:mana:/sec; ^-${MR2.formatNumber(\r\n        expense,\r\n      )}^<${expenseExplanation}>:earthessence:/sec`;\r\n    }\r\n  }\r\n\r\n  const manaGeyser = new ManaGeyser();\r\n\r\n  MR2.IncomeOverTimeProducers.register(\r\n    new MR2.IncomeOverTimeProducer(\r\n      manaGeyser.getId(),\r\n      manaGeyser.getName(),\r\n      (state) => ({\r\n        Mana:\r\n          calculateIncomePerGeyser(state) *\r\n          MR2.getBuildingAmountTurnedOn(state, manaGeyser),\r\n        EarthEssence:\r\n          -1 *\r\n          calculateExpensePerGeyser(state) *\r\n          MR2.getBuildingAmountTurnedOn(state, manaGeyser),\r\n      }),\r\n    ),\r\n  );\r\n\r\n  MR2.Buildings.register(manaGeyser);\r\n\r\n  class BuildManaGeyser extends MR2.BuildingSpell {\r\n    getBuilding(): Building {\r\n      return manaGeyser;\r\n    }\r\n\r\n    getAreas(): Partial<Record<ActionArea, ActionSubcategory[]>> {\r\n      return { HOME: [MR2.ActionSubcategories.MANA] };\r\n    }\r\n\r\n    getBaseResourceCost(): Partial<Record<Resource, number>> {\r\n      return {\r\n        WaterEssence: 500,\r\n        EarthEssence: 500,\r\n      };\r\n    }\r\n\r\n    getBaseResourceScale(): Partial<Record<Resource, number>> {\r\n      return {\r\n        WaterEssence: 1.4,\r\n        EarthEssence: 1.2,\r\n      };\r\n    }\r\n\r\n    getBaseAlternateLandUnawareBuildingAmount(): number {\r\n      return 2;\r\n    }\r\n\r\n    isVisible(state: GameState): boolean {\r\n      return true;\r\n    }\r\n\r\n    getLevelRequirements(): Partial<Record<SpellElement, number>> {\r\n      return { Earth: 1 };\r\n    }\r\n\r\n    getElement(): SpellElement | undefined {\r\n      return MR2.SpellElement.Earth;\r\n    }\r\n  }\r\n\r\n  const buildManaGeyser = new BuildManaGeyser();\r\n\r\n  MR2.BuildingAmountListeners.register((state, building) => {\r\n    if (building == manaGeyser) {\r\n      state = MR2.clearCalculatedIncomeCache(state);\r\n    }\r\n    return state;\r\n  });\r\n\r\n  MR2.registerSpell(buildManaGeyser);\r\n}\r\n","import { MR2Globals } from \"magic-research-2-modding-sdk\";\r\nimport { GameState } from \"magic-research-2-modding-sdk/modding-decs/backend/GameState\";\r\nimport { SpellElementType } from \"magic-research-2-modding-sdk/modding-decs/backend/spells/Elements\";\r\n\r\nconst ELEMENT_NAME = \"Antimatter\";\r\nconst RESOURCE_NAME = ELEMENT_NAME;\r\n\r\n// This test mod creates a new simple Element using the preload feature\r\n// of the modding system to obtain many of the \"default\" behaviors\r\n// (like being unable to cast their spells during the pilgrimage of another Element)\r\nexport function preloadElementCreationTestMod(MR2: MR2Globals) {\r\n  // The theme for the element.\r\n  // You can generate a theme by using the tool at\r\n  // https://callstack.github.io/react-native-paper/docs/guides/theming\r\n  const antimatterTheme = (isDark: boolean) => {\r\n    const exportedColors = !isDark\r\n      ? {\r\n          colors: {\r\n            primary: \"rgb(135, 82, 0)\",\r\n            onPrimary: \"rgb(255, 255, 255)\",\r\n            primaryContainer: \"rgb(255, 221, 186)\",\r\n            onPrimaryContainer: \"rgb(43, 23, 0)\",\r\n            secondary: \"rgb(113, 90, 65)\",\r\n            onSecondary: \"rgb(255, 255, 255)\",\r\n            secondaryContainer: \"rgb(253, 221, 189)\",\r\n            onSecondaryContainer: \"rgb(40, 24, 5)\",\r\n            tertiary: \"rgb(85, 99, 60)\",\r\n            onTertiary: \"rgb(255, 255, 255)\",\r\n            tertiaryContainer: \"rgb(216, 233, 183)\",\r\n            onTertiaryContainer: \"rgb(20, 31, 2)\",\r\n            error: \"rgb(186, 26, 26)\",\r\n            onError: \"rgb(255, 255, 255)\",\r\n            errorContainer: \"rgb(255, 218, 214)\",\r\n            onErrorContainer: \"rgb(65, 0, 2)\",\r\n            background: \"rgb(255, 251, 255)\",\r\n            onBackground: \"rgb(31, 27, 22)\",\r\n            surface: \"rgb(255, 251, 255)\",\r\n            onSurface: \"rgb(31, 27, 22)\",\r\n            surfaceVariant: \"rgb(241, 224, 208)\",\r\n            onSurfaceVariant: \"rgb(80, 69, 58)\",\r\n            outline: \"rgb(130, 117, 104)\",\r\n            outlineVariant: \"rgb(212, 196, 181)\",\r\n            shadow: \"rgb(0, 0, 0)\",\r\n            scrim: \"rgb(0, 0, 0)\",\r\n            inverseSurface: \"rgb(53, 47, 42)\",\r\n            inverseOnSurface: \"rgb(249, 239, 231)\",\r\n            inversePrimary: \"rgb(255, 184, 101)\",\r\n            elevation: {\r\n              level0: \"transparent\",\r\n              level1: \"rgb(249, 243, 242)\",\r\n              level2: \"rgb(245, 238, 235)\",\r\n              level3: \"rgb(242, 232, 227)\",\r\n              level4: \"rgb(241, 231, 224)\",\r\n              level5: \"rgb(238, 227, 219)\",\r\n            },\r\n            surfaceDisabled: \"rgba(31, 27, 22, 0.12)\",\r\n            onSurfaceDisabled: \"rgba(31, 27, 22, 0.38)\",\r\n            backdrop: \"rgba(57, 47, 36, 0.4)\",\r\n          },\r\n        }\r\n      : {\r\n          colors: {\r\n            primary: \"rgb(255, 184, 101)\",\r\n            onPrimary: \"rgb(72, 42, 0)\",\r\n            primaryContainer: \"rgb(102, 61, 0)\",\r\n            onPrimaryContainer: \"rgb(255, 221, 186)\",\r\n            secondary: \"rgb(224, 193, 163)\",\r\n            onSecondary: \"rgb(63, 45, 23)\",\r\n            secondaryContainer: \"rgb(88, 67, 43)\",\r\n            onSecondaryContainer: \"rgb(253, 221, 189)\",\r\n            tertiary: \"rgb(189, 205, 157)\",\r\n            onTertiary: \"rgb(40, 52, 18)\",\r\n            tertiaryContainer: \"rgb(62, 75, 39)\",\r\n            onTertiaryContainer: \"rgb(216, 233, 183)\",\r\n            error: \"rgb(255, 180, 171)\",\r\n            onError: \"rgb(105, 0, 5)\",\r\n            errorContainer: \"rgb(147, 0, 10)\",\r\n            onErrorContainer: \"rgb(255, 180, 171)\",\r\n            background: \"rgb(31, 27, 22)\",\r\n            onBackground: \"rgb(235, 225, 217)\",\r\n            surface: \"rgb(31, 27, 22)\",\r\n            onSurface: \"rgb(235, 225, 217)\",\r\n            surfaceVariant: \"rgb(80, 69, 58)\",\r\n            onSurfaceVariant: \"rgb(212, 196, 181)\",\r\n            outline: \"rgb(157, 142, 129)\",\r\n            outlineVariant: \"rgb(80, 69, 58)\",\r\n            shadow: \"rgb(0, 0, 0)\",\r\n            scrim: \"rgb(0, 0, 0)\",\r\n            inverseSurface: \"rgb(235, 225, 217)\",\r\n            inverseOnSurface: \"rgb(53, 47, 42)\",\r\n            inversePrimary: \"rgb(135, 82, 0)\",\r\n            elevation: {\r\n              level0: \"transparent\",\r\n              level1: \"rgb(42, 35, 26)\",\r\n              level2: \"rgb(49, 40, 28)\",\r\n              level3: \"rgb(56, 44, 31)\",\r\n              level4: \"rgb(58, 46, 32)\",\r\n              level5: \"rgb(62, 49, 33)\",\r\n            },\r\n            surfaceDisabled: \"rgba(235, 225, 217, 0.12)\",\r\n            onSurfaceDisabled: \"rgba(235, 225, 217, 0.38)\",\r\n            backdrop: \"rgba(57, 47, 36, 0.4)\",\r\n          },\r\n        };\r\n    return exportedColors.colors;\r\n  };\r\n\r\n  // Register the icon\r\n  const antimatterIcon = require(\"./image/Antimatter.png\");\r\n  MR2.registerGameIcon(ELEMENT_NAME.toLowerCase(), antimatterIcon);\r\n  MR2.registerGameIcon(\"antimatter\", antimatterIcon);\r\n\r\n  // Register the resource\r\n  MR2.registerResource(RESOURCE_NAME, {\r\n    id: RESOURCE_NAME,\r\n    name: \"Antimatter\",\r\n    resourceInfo: {\r\n      baseCap: Number.MAX_SAFE_INTEGER,\r\n      icon: \"antimatter\",\r\n    },\r\n  });\r\n\r\n  // Register the element\r\n  MR2.registerSpellElement({\r\n    colors: antimatterTheme,\r\n    id: ELEMENT_NAME,\r\n    name: \"Antimatter\",\r\n    description:\r\n      \"A mysterious Element. Nothing is known about it except that it's ridiculous.\",\r\n  });\r\n\r\n  // Register the association between the element and the resource\r\n  MR2.registerExtraElementToResourceMapping(ELEMENT_NAME, RESOURCE_NAME);\r\n\r\n  // All the rest is done in the post-load phase\r\n}\r\n\r\nexport function loadElementCreationTestMod(MR2: MR2Globals) {\r\n  // Create a channeling spell (required)\r\n  class ChannelAntimatter extends MR2.BasicChannelingSpellBase {\r\n    getId(): string {\r\n      return \"channelAntimatter\";\r\n    }\r\n    getSpellName(): string {\r\n      return \"Channel Antimatter\";\r\n    }\r\n    getElement(): SpellElementType | undefined {\r\n      return ELEMENT_NAME;\r\n    }\r\n    getDisplayDescription(state: GameState): string {\r\n      return \"Channel some of your Mana into Antimatter Essence, a basic resource.\";\r\n    }\r\n    getLevelRequirements(): Partial<Record<SpellElementType, number>> {\r\n      return {\r\n        Antimatter: 1,\r\n      };\r\n    }\r\n    getManaCostProportion(): number {\r\n      // Requires a lot of Mana\r\n      return 0.3;\r\n    }\r\n    getBaseEssenceEfficiency(): number {\r\n      // Produces a ton of Essence\r\n      return 10;\r\n    }\r\n  }\r\n\r\n  const channelAntimatter = new ChannelAntimatter();\r\n  MR2.registerSpell(channelAntimatter);\r\n  MR2.registerChannelingSpellForElement(\"Antimatter\", channelAntimatter);\r\n\r\n  // Create and load a shard (required because of Shard Stockpile Storyline)\r\n  MR2.createAndLoadElementalShard(\r\n    \"Antimatter\",\r\n    require(\"./image/Antimatter.png\"),\r\n    0.25,\r\n  );\r\n\r\n  // Finally, if we load a save file where Exploration is already unlocked,\r\n  // we will need to partially unlock it\r\n  MR2.SaveDataCompatibilityTransforms.register((state) => {\r\n    state = MR2.unlockElement(ELEMENT_NAME)(state);\r\n    return state;\r\n  }, \"antimatterUnlocker\");\r\n}\r\n","const minGameVersion = require(\"./package.json\").minGameVersion;\r\n\r\nexport {minGameVersion};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// DO NOT MODIFY - Begin\n// Any change to the values provided in MR2 cannot be done without changing\n// the game's version number.\n// This value will be taken from the SDK itself and used as a parameter in-game\n// to make sure the mod's version supports the game's version.\nexport const minGameVersion =\n  require(\"magic-research-2-modding-sdk\").minGameVersion;\n// DO NOT MODIFY - End\n\nconst {\n  load,\n  preload,\n  id,\n  name,\n  version,\n  description,\n} = require(\"./MR2TestMods\");\n\nexport { description, id, load, name, preload, version };\n"],"names":[],"sourceRoot":""}